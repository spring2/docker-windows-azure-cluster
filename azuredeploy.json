{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environmentName": {
            "type": "string"
        },
        "consulHosts": {
            "type": "int"
        },
        "dockerHosts": {
            "type": "int"
        },
        "dockerMachineSize": {
            "type": "string"
        },
        "consulMachineSize": {
            "type": "string"
        },	
        "adminUsername": {
            "type": "string"
        },
        "adminPassword": {
            "type": "securestring"
        },
		
		
		
        "virtualNetworkName": {
            "type": "string"
        },
        "networkSecurityGroupName": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string"
        },
        "storageAccountType": {
            "type": "string"
        },
        "diagnosticsStorageAccountName": {
            "type": "string"
        },
        "diagnosticsStorageAccountId": {
            "type": "string"
        },
        "diagnosticsStorageAccountType": {
            "type": "string"
        },
        "addressPrefix": {
            "type": "string"
        },
        "subnetName": {
            "type": "string"
        },
        "subnetPrefix": {
            "type": "string"
        }
    },
    "variables": {
        "apiVersion": "2015-06-15",
        "hostDNSNameScriptArgument": "[concat('*.',resourceGroup().location,'.cloudapp.azure.com')]",
        "networkSecurityGroupName": "[concat('s2-docker-03','_nsg')]",
        "virtualNetworkName": "[concat('s2-docker-03','_vnet')]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "[concat('s2-docker-03','_subnet')]",
        "subnetPrefix": "10.0.0.0/24",
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]"
    },
    "resources": [
        {
            "name": "[concat('s2-docker-0', copyIndex(3))]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', 's2-docker-0', copyIndex(3), '_nic')]",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('diagnosticsStorageAccountName'))]",
				"[concat('Microsoft.Compute/virtualMachines/', 's2-consul-01')]"
            ],
            "properties": {
                "osProfile": {
                    "computerName": "[concat('s2-docker-0', copyIndex(3))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "provisionVmAgent": "true"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('dockerMachineSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2016-Datacenter-with-Containers",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "fromImage",
                        "vhd": {
                            "uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'), 's2-docker-0', copyIndex(3), '20170531144746.vhd')]"
                        },
                        "name": "[concat('s2-docker-0', copyIndex(3))]"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('s2-docker-0', copyIndex(3), '_nic'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', parameters('diagnosticsStorageAccountName')), '2015-06-15').primaryEndpoints['blob']]"
                    }
                }
            },
			"copy": {
                "name": "dockercopy",
                "count": "[parameters('dockerHosts')]"
            },			
            "resources": [
                {
                    "name": "containerConfiguration",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2015-06-15",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', 's2-docker-0', copyIndex(3))]"
                    ],
                    "tags": {
                        "displayName": "containerConfiguration"
                    },
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "https://raw.githubusercontent.com/spring2/docker-windows-cluster-azure/master/containerConfig.ps1"
                            ],
                            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file containerConfig.ps1 ',variables('hostDNSNameScriptArgument'))]"
                        }
                    }
                }
            ]
        },
        {
            "name": "[parameters('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[parameters('storageAccountType')]"
            }
        },
        {
            "name": "[parameters('diagnosticsStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[parameters('diagnosticsStorageAccountType')]"
            }
        },
        {
            "name": "[parameters('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2016-12-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "name": "[concat('s2-docker-0', copyIndex(3), '_nic')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[concat('Microsoft.Network/publicIpAddresses/', concat('s2-docker-0', copyIndex(3), '_ip'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIpAddresses', concat('s2-docker-0', copyIndex(3), '_ip'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                }
            },
			"copy": {
                "name": "dockerniccopy",
                "count": "[parameters('dockerHosts')]"
            }
        },
        {
            "name": "[concat('s2-consul-0', copyIndex(1), '_nic')]",
            "type": "Microsoft.Network/networkInterfaces",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
            ],
            "tags": {
                "displayName": "[concat('s2-consul-0', copyIndex(1), '_nic')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIpAddresses', concat('s2-consul-0', copyIndex(1), '_ip'))]"
                            }
                        }
                    }
                ]
            },
			"copy": {
                "name": "consulniccopy",
                "count": "[parameters('consulHosts')]"
            }
        },
        {
            "name": "[concat('s2-docker-0', copyIndex(3), '_ip')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIpAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[tolower(concat('s2-docker-0', copyIndex(3)))]"
                }
            },
			"copy": {
                "name": "dockeripcopy",
                "count": "[parameters('dockerHosts')]"
            }			
        },
        {
            "name": "[concat('s2-consul-0', copyIndex(1), '_ip')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIpAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[tolower(concat('s2-consul-0', copyIndex(1)))]"
                }
            },
			"copy": {
                "name": "consulipcopy",
                "count": "[parameters('consulHosts')]"
            }			
        },
        {
            "name": "[parameters('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-rdp",
                        "properties": {
                            "priority": 1000,
                            "sourceAddressPrefix": "*",
                            "protocol": "TCP",
                            "destinationPortRange": "3389",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "Docker-tls",
                        "properties": {
                            "description": "Docker",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2376",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 300,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Docker",
                        "properties": {
                            "description": "Docker",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2375",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 301,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "name": "[concat('s2-consul-0', copyIndex(1))]",
            "type": "Microsoft.Compute/virtualMachines",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', concat('s2-consul-0', copyIndex(1), '_nic'))]"
            ],
            "tags": {
                "displayName": "[concat('s2-consul-0', copyIndex(1))]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('consulMachineSize')]"
                },
                "osProfile": {
                    "computerName": "[concat('s2-consul-0', copyIndex(1))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('s2-consul-0', copyIndex(1), 'OSDisk')]",
                        "vhd": {
                            "uri": "[concat('http://', parameters('storageAccountName'), '.blob.core.windows.net/', 'vhds', '/', 's2-consul-0', copyIndex(1), 'OSDisk', '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('s2-consul-0', copyIndex(1), '_nic'))]"
                        }
                    ]
                }
            },
			"copy": {
                "name": "consulcopy",
                "count": "[parameters('consulHosts')]"
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
    }
}